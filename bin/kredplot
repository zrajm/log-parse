#!/usr/bin/perl -w
#
# kredplot - generate simple opstat log from kredlogs
#
# [2008-03-19, 10:16-10:35] v0.1 - created from kredgrep
#
# This very simplistic script is just indended to be used for testing
# my extracted kredlogs for gaps.
#
# It extracts the event times from a kredlog and generarates an opstat
# log (with time in epoch seconds) which should be useful for doing
# some frequency plotting of events in the kredlog.

use strict;
use lib do {        # add script's directory to @INC
    use File::Spec; # to prettify path
    use Cwd;        # to follow symlinks in path
    my ($vol, $dir) = File::Spec->splitpath(Cwd::abs_path($0));
        $dir        = File::Spec->catdir(File::Spec->splitdir($dir));
    File::Spec->catpath($vol, $dir, '');
};  
use Log::Parse;
use Time::Local;


############
##  Init  ##
############


%SIG = (
    __DIE__  => sub {
	(my $mybin = $0) =~ s{^.*/}{};
	warn "$mybin: $_[0]";
	exit 5;
    },
    __WARN__ => sub {
	(my $mybin = $0) =~ s{^.*/}{};
	warn "$mybin: $_[0]";
    },
);



############
##  Main  ##
############


# Regex matching the following headers:
#     == 7-Nov-2007::20:31:07 == [...]
#     kred@lax      2007-02-13 23:15:05 [...]
#     kred@lax      2005-05-24 02:30:0  [...]
#       (digits for seconds may be one digit only in older logs! -- weirdly enough!)

our %month = (
    Jan =>  0,  Feb =>  1,  Mar =>  2,  Apr =>  3,
    May =>  4,  Jun =>  5,  Jul =>  6,  Aug =>  7,
    Sep =>  8,  Oct =>  9,  Nov => 10,  Dec => 11,
    );
my $month_re = join('|', keys %month);
my $log = Log::Parse->new(
    entry_regex => qr/^(?:
        ==\s+ (\d+)-($month_re)-(\d+) :: (\d+):(\d+):(\d+) \s+ |
        (?:\w+\s+)? \w+@\w+ \s+ (\d+)-(\d+)-(\d+) \s+ (\d+):(\d+):(\d+) \s+
    )/mox,
    entry_callback => sub {
	return do {
	    # return seconds since epoch
	    if (defined $_[0]) {
		timelocal(@_[5, 4, 3, 0], $month{$_[1]}, $_[2]);
	    } elsif (defined $_[6]) {
		timelocal(@_[11, 10, 9, 8], $_[7]-1, $_[6]);
	    } else {
		0;
	    }
	};
    },
);


# main loop
FILE: foreach my $infile (@ARGV) {              # for each input file
    $infile =~ s/\/+$//;                        #   strip trailing slashes
    warn "$infile\n";
    use Cwd 'abs_path';
    my ($machine) = abs_path($infile) =~ m#/logs.([a-z]+)/#;
    $machine = "unknown" unless defined($machine);
    if (-d $infile) {
	warn "cannot open `$infile' for reading: File is a directory\n";
	next;
    }
    # process one file
    defined($log->open($infile)) or do {        #   open file
	warn "Cannot open file `$infile': $!\n";
	next FILE;
    };
    while (($_, my $epoch) = $log->read()) {    #   for each entry
        print "$epoch $machine logevent 0 ?\n"; #
	print "    BAD: $infile: $_" if $epoch == 0;
    }                                           #
}                                               #

#[[eof]]
